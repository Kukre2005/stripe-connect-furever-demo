{{#unless session.isOnboarded}}
  {{> onboarding_notice}}
{{/unless}}
{{> header}}
<div class="flex-1 relative mt-0.5 h-full pb-8">
  <div class="flex w-full min-h-50 lg:px-10 xxs:px-5 py-11">
    <a href="/customers/{{customer.id}}">
      <button
        type="button"
        class="inline-flex items-center px-2.5 py-1.5 border border-dark-gray-300 shadow-sm text-xs font-semibold rounded text-dark-gray-700 bg-white hover:bg-dark-gray-50 active:ring-1 active:ring-dark-gray-400"
      >
        <svg
          width="15"
          height="12"
          viewBox="0 0 15 12"
          fill="none"
          xmlns="http://www.w3.org/2000/svg"
        >
          <path
            d="M6.16667 10.6668L1.5 6.00016M1.5 6.00016L6.16667 1.3335M1.5 6.00016L13.5 6.00016"
            stroke="#919191"
            stroke-width="2"
            stroke-linecap="round"
            stroke-linejoin="round"
          ></path>
        </svg>
        <span class="ml-3">
          Back
        </span>
      </button>
    </a>
  </div>
  <div class="flex flex-col justify-between w-full lg:px-5 lg:flex-row">
    <div class="xxs:px-5 xxs:pb-5">
      <h1 class="text-lg text-dark-gray-900">
        Add new invoice
      </h1>
      <p class="text-sm text-dark-gray-500">
        Use a permanent address where you can receive mail.
      </p>
    </div>
    <div class="flex flex-col flex-1 sm:mt-5 xl:ml-28 xl:mt-0 w-full">
      <form id="create-invoice-form" class="w-full shadow-md lg:w-full" method="POST">
        <div class="p-6 bg-light-blue-100 rounded-t">
          <h2
            id="customer-name-title"
            name="{{customer.id}}"
            class="text-lg text-dark-gray-900 sm:truncate"
          >
            {{customer.name}}
          </h2>
          <p class="text-sm text-dark-gray-500">
            Invoice recepient
          </p>
        </div>
        <div class="bg-white space-y-6 sm:space-y-5 lg:p-6 xxs:p-3">
          <ul id="invoice-item-list" class="flex flex-wrap">
            <li
              id="invoice-item"
              data-identifier="1"
              class="flex md:flex-row py-3 lg:align-center sm:align-end w-full xxs:flex-col"
            >
              <div class="lg:w-20 xs:w-full min-w-[271px]">
                <label id="listbox-label" class="block text-sm font-medium text-dark-gray-500">
                  Select service
                </label>
                <div class="mt-1 relative">
                  <button
                    id="service-input-1"
                    data-identifier="service-input-1"
                    name="service-select-input"
                    type="button"
                    class="bg-white relative w-full h-full min-h-[38px] border border-dark-gray-300 rounded-md shadow-sm pl-3 pr-12 py-2 text-left cursor-default focus:outline-none focus:ring-1 focus:ring-dark-gray-400 focus:border-dark-gray-400 sm:text-sm"
                    aria-haspopup="listbox"
                    aria-expanded="true"
                    aria-labelledby="listbox-label"
                  >
                    <span
                      id="service-input-value-1"
                      name="service-select-input"
                      data-price={{prices/0/id}}
                      class="block truncate"
                    >
                      {{prices/0/nickname}}
                    </span>
                    <span
                      class="absolute inset-y-0 right-0 flex items-center pr-2 pointer-events-none"
                    >
                      <svg
                        class="h-5 w-5 text-dark-gray-400"
                        xmlns="http://www.w3.org/2000/svg"
                        viewBox="0 0 20 20"
                        fill="currentColor"
                        aria-hidden="true"
                      >
                        <path
                          fill-rule="evenodd"
                          d="M10 3a1 1 0 01.707.293l3 3a1 1 0 01-1.414 1.414L10 5.414 7.707 7.707a1 1 0 01-1.414-1.414l3-3A1 1 0 0110 3zm-3.707 9.293a1 1 0 011.414 0L10 14.586l2.293-2.293a1 1 0 011.414 1.414l-3 3a1 1 0 01-1.414 0l-3-3a1 1 0 010-1.414z"
                          clip-rule="evenodd"
                        ></path>
                      </svg>
                    </span>
                  </button>
                  <ul
                    id="service-1"
                    name="service-select-input-list"
                    class="absolute z-10 mt-1 w-full bg-white shadow-lg max-h-60 rounded-md py-1 text-base ring-1 ring-black ring-opacity-5 overflow-auto focus:outline-none sm:text-sm hidden"
                    tabindex="-1"
                    role="listbox"
                    aria-labelledby="listbox-label"
                    aria-activedescendant="listbox-option-3"
                  >
                    {{#each prices}}
                      <li
                        id="option-1"
                        name="{{id}}"
                        data-service="service-input-value-1"
                        data-value={{centsToDollars unit_amount}}
                        onmouseleave="highlightOption(event)"
                        onmouseenter="highlightOption(event)"
                        class="text-dark-gray-900 cursor-default select-none relative py-2 pl-3 pr-9"
                        role="option"
                      >
                        {{nickname}}
                        <span
                          class="text-indigo-600 absolute inset-y-0 right-0 flex items-center pr-4"
                        >
                          <svg
                            hidden
                            id="service-1-option-check"
                            class="h-5 w-5"
                            xmlns="http://www.w3.org/2000/svg"
                            viewBox="0 0 20 20"
                            aria-hidden="true"
                          >
                            <path
                              fill-rule="evenodd"
                              d="M16.707 5.293a1 1 0 010 1.414l-8 8a1 1 0 01-1.414 0l-4-4a1 1 0 011.414-1.414L8 12.586l7.293-7.293a1 1 0 011.414 0z"
                              clip-rule="evenodd"
                            ></path>
                          </svg>
                        </span>
                      </li>
                    {{/each}}
                  </ul>
                </div>
              </div>
              <div
                class="min-w-[124px] xxs:mt-5 md:mt-0 lg:ml-7 md:ml-3 sm:w-full lg:w-20"
              >
                <label for="cost" class="block text-sm font-medium text-dark-gray-500">
                  Cost
                </label>
                <div class="w-full mt-1 relative rounded-md shadow-sm">
                  <div class="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
                    <span class="text-dark-gray-500 sm:text-sm">
                      $
                    </span>
                  </div>
                  <input
                    id="cost-1"
                    disabled
                    type="text"
                    name="cost"
                    class="w-full bg-light-blue-50 text-dark-gray-500 block pl-7 pr-12 sm:text-sm border-dark-gray-300 rounded-md"
                    value="{{centsToDollars prices/0/unit_amount}}"
                    aria-describedby="price-currency"
                  />
                  <div
                    class="absolute inset-y-0 right-0 pr-3 flex items-center pointer-events-none"
                  >
                    <span class="text-dark-gray-500 sm:text-sm">
                      USD
                    </span>
                  </div>
                </div>
              </div>
              <div
                class="flex xxs:items-end lg:items-center xxs:mt-5 md:mt-0 md:border-b-0 border-dark-gray-200 xxs:border-b-2 xxs:pb-10 lg:pb-0"
              >
                <div class="w-[124px] min-w-[124px] lg:ml-7 md:ml-3">
                  <label for="quantity" class="block text-sm font-medium text-dark-gray-500">
                    Quantity
                  </label>
                  <div class="mt-1 relative rounded-md shadow-sm">
                    <input
                      id="quantity-1"
                      oninput="handleQuantityChange(event)"
                      class="cursor-pointer bg-white relative w-full border border-dark-gray-300 rounded-md shadow-sm pl-3 pr-3 py-2 text-left cursor-default focus:outline-none focus:ring-1 focus:ring-dark-gray-400 focus:border-dark-gray-400 sm:text-sm"
                      minlength="1"
                      min="1"
                      name="{{prices/0/id}}"
                      type="number"
                      data-quantityIdentifier="invoice-quantity-input"
                      value="1"
                      class="block max-w-smw w-full shadow-sm focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm border-dark-gray-300 rounded-md"
                    />
                  </div>
                </div>
                <div class="min-w-[180px] lg:ml-7 xxs:ml-3 lg:w-30">
                  <label for="amount" class="block text-sm font-medium text-dark-gray-500">
                    Amount
                  </label>
                  <div class="mt-1 relative rounded-md shadow-sm">
                    <div
                      class="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none"
                    >
                      <span class="text-dark-gray-500 sm:text-sm">
                        $
                      </span>
                    </div>
                    <input
                      disabled
                      type="text"
                      name="amount"
                      id="amount-1"
                      class="bg-light-blue-50 text-dark-gray-500 block w-full pl-7 pr-12 sm:text-sm border-dark-gray-300 rounded-md"
                      data-value="{{centsToDollars prices/0/unit_amount}}"
                      value="{{centsToDollars prices/0/unit_amount}}"
                      aria-describedby="price-currency"
                    />
                    <div
                      class="absolute inset-y-0 right-0 pr-3 flex items-center pointer-events-none"
                    >
                      <span class="text-dark-gray-500 sm:text-sm" id="amount-currency">
                        USD
                      </span>
                    </div>
                  </div>
                </div>
                <div
                  class="min-w-[20px] h-[38px] lg:ml-7 xxs:ml-2 flex self-end items-center"
                  data-itemIdentifier="invoice-item-1"
                  id="invoice-item-delete"
                >
                  <svg
                    hidden
                    id="invoice-item-delete-icon"
                    class="stroke-current text-dark-gray-400 hover:text-brand h-5 cursor-pointer"
                    width="18"
                    height="20"
                    viewBox="0 0 18 20"
                    fill="none"
                    xmlns="http://www.w3.org/2000/svg"
                  >
                    <path
                      d="M16 5L15.1327 17.1425C15.0579 18.1891 14.187 19 13.1378 19H4.86224C3.81296 19 2.94208 18.1891 2.86732 17.1425L2 5M7 9V15M11 9V15M12 5V2C12 1.44772 11.5523 1 11 1H7C6.44772 1 6 1.44772 6 2V5M1 5H17"
                      stroke="currentColor"
                      stroke-width="2"
                      stroke-linecap="round"
                      stroke-linejoin="round"
                    ></path>
                  </svg>
                </div>
              </div>
            </li>
          </ul>
          <button
            id="add-invoice-item"
            type="button"
            class="relative xxs:flex justify-center items-center px-6 py-2.5 border border-transparent text-sm font-medium rounded shadow-sm text-white bg-brand hover:bg-brand-outline active:ring-2 active:ring-offset-2 active:ring-brand-outline"
          >
            <svg
              width="10"
              height="10"
              viewBox="0 0 10 10"
              fill="none"
              xmlns="http://www.w3.org/2000/svg"
            >
              <path
                fill-rule="evenodd"
                clip-rule="evenodd"
                d="M5 0C5.55228 0 6 0.447715 6 1V4L9 4C9.55228 4 10 4.44772 10 5C10 5.55228 9.55228 6 9 6H6V9C6 9.55229 5.55228 10 5 10C4.44771 10 4 9.55229 4 9V6H1C0.447715 6 0 5.55228 0 5C5.96046e-08 4.44771 0.447715 4 1 4L4 4V1C4 0.447715 4.44771 0 5 0Z"
                fill="white"
              ></path>
            </svg>
            <span class="ml-4">
              Add one more service
            </span>
          </button>
          <div id="invoice-description">
            <label for="description" class="block text-sm font-medium text-dark-gray-500">
              Description
            </label>
            <div class="mt-1 relative rounded-md shadow-sm">
              <input
                class="bg-white relative w-full border border-dark-gray-300 rounded-md shadow-sm pl-3 pr-10 py-2 text-left cursor-default focus:outline-none focus:ring-1 focus:ring-dark-gray-400 focus:border-dark-gray-400 sm:text-sm"
                minlength="1"
                name="invoice-description"
                type="text"
                class="block max-w-smw w-full shadow-sm focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm border-dark-gray-300 rounded-md"
              />
            </div>
          </div>
        </div>
        <div class="flex items-center justify-end p-6 bg-light-blue-100">
          <span class="align-center mr-2 text-sm text-dark-gray-500">
            Total amount:
          </span>
          <p class="text-md text-dark-gray-900 sm:text-xl sm:truncate">
            $
            <span id="invoice-total-amount">
              {{centsToDollars prices/0/unit_amount}}
            </span>
            USD
          </p>
        </div>
      </form>
      <button
        id="submit-new-invoice"
        form="create-invoice-form"
        type="submit"
        class="self-end relative flex justify-center items-center lg:mr-0 xxs:m-6 px-10 py-2.5 border border-transparent text-sm font-semibold rounded shadow-sm text-white bg-brand hover:bg-brand-outline active:ring-2 active:ring-offset-2 active:ring-brand-outline"
      >
        Apply changes
        <span
          class="spinner hidden absolute right-0 animate-spin rounded-full h-5 w-5 mx-3 border-b-2"
        ></span>
      </button>
    </div>
  </div>
</div>
{{> footer}}
<script>
  const form = document.getElementById('create-invoice-form')
  const firstServiceRow = form.querySelector('#invoice-item');
  const initialPrice = form.querySelector('#service-input-value-1');

  form.addEventListener('click', (event) => {
    if(event.target.dataset.identifier == 'service-input-1' || event.target.parentNode.dataset.identifier == 'service-input-1') {
      toggleDropdown('service-1');
    } else if (event.target.id == 'add-invoice-item' || event.target.parentNode.id == 'add-invoice-item')  {
        addInvoiceItem(event, 'invoice-item-list')
    }
  })

  for(const option of firstServiceRow.getElementsByTagName('li')) {
    option.addEventListener('click', (event) => {
      chooseOption(event)
    });
    if(option.getAttribute('name') == initialPrice.dataset.price) {
      option.getElementsByTagName('svg')[0].removeAttribute('hidden');
      option.classList.toggle('font-semibold');
    } else {
      option.getElementsByTagName('svg')[0].setAttribute('hidden', true);
      option.classList.remove('font-semibold');
    }
  }

  form.addEventListener('submit', async (event) => {
    event.preventDefault();
    const services = {}

    const formValues = form.querySelectorAll(`[data-quantityidentifier='invoice-quantity-input']`);
    const invoiceDescription = form.querySelector(`[name='invoice-description']`);
    const customerId = document.getElementById('customer-name-title').getAttribute('name');
    const submitButton = event.submitter;

    submitButton.classList.add('disabled');
    submitButton.querySelector('.spinner').classList.remove('hidden');

    for(const item of formValues) {
      if(services[item.name]) {
        services[item.name] += parseInt(item.value);
      } else {
        services[item.name] = parseInt(item.value);
      }
    }

    const response = await fetch('/invoices', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json'
      },
      body: JSON.stringify({ services, description: invoiceDescription.value, customerId})
    });

    if (!response.ok) {
      submitButton.classList.remove('disabled');
      submitButton.querySelector('.spinner').classList.add('hidden');
      const { error } = await response.json();
      window.notificationEvents.fail();
      return;
    }
    window.notificationEvents.success('Invoice has been added!', 'Now you can view and copy the link to share it with customer.');
    window.location = `/customers/${customerId}`
  });

  (function addEventListenerToBody() {
    document.body.addEventListener('click', toggleAllDropdowns)
  })()

  function toggleDropdown(dropdownID) {
    document.getElementById(dropdownID).classList.toggle('hidden')
  }

  function toggleAllDropdowns(event) {
    if(event.target.getAttribute('name') !== 'service-select-input' && event.currentTarget.getAttribute('name') !== 'service-select-input') {
      for(const element of document.getElementsByName('service-select-input-list')) {
        element.classList.add('hidden')
      }
    }
  };

  function handleQuantityChange(event) {
    const serviceItem = event.path.find(el => el.id === 'invoice-item'),
      itemIdentifier = serviceItem.dataset.identifier;
    let element = event.target,
      costInput = serviceItem.querySelector(`#cost-${itemIdentifier}`),
      amountInput = serviceItem.querySelector(`#amount-${itemIdentifier}`);

    if(element.value > 0) {
      amountInput.value = (element.value * costInput.value).toFixed(2)
    } else {
      element.value = 1
      amountInput.value = amountInput.dataset.value
    }
    handleTotalAmount()
  };

  function highlightOption(event) {
    let element = event.target;
    element.classList.toggle('text-light-blue');
  };

  function handleTotalAmount() {
    const listItem = document.getElementById('invoice-item-list'),
      allListAmounts = listItem.querySelectorAll(`[name='amount']`);
    let totalAmountElement = document.getElementById('invoice-total-amount'),
      totalAmount = 0;

    for(const amount of allListAmounts) {
      totalAmount += parseInt(amount.value)
    }

    totalAmountElement.textContent = totalAmount.toFixed(2);
  };

  function chooseOption(event) {
    const element = event.target,
      serviceItem = event.path.find(el => el.id === 'invoice-item'),
      options = serviceItem.getElementsByTagName('li'),
      itemIdentifier = serviceItem.dataset.identifier;
    let quantityInput = serviceItem.querySelector(`#quantity-${itemIdentifier}`),
      costInput = serviceItem.querySelector(`#cost-${itemIdentifier}`),
      amountInput = serviceItem.querySelector(`#amount-${itemIdentifier}`),
      chosenValue = serviceItem.querySelector(`#service-input-value-${itemIdentifier}`),
      chosenOption = serviceItem.querySelector(`[name='${event.target.getAttribute('name')}']`);
    //*
    //setting quantity name as choosed service, this form input will be parsed at the backend in `service`:`quantity` format.
    quantityInput.setAttribute('name', event.target.getAttribute('name').replace(/[\n\r]+|[\s]{2,}/g, ' ').trim());
    //*

    costInput.value = chosenOption.dataset.value;
    amountInput.value = (parseInt(chosenOption.dataset.value) * quantityInput.value).toFixed(2);
    chosenValue.textContent = event.target.textContent;

    for(const option of options) {
      if(option.getAttribute('name') === chosenOption.getAttribute('name')) {
        option.getElementsByTagName('svg')[0].removeAttribute('hidden');
        option.classList.toggle('font-semibold');
      } else {
        option.getElementsByTagName('svg')[0].setAttribute('hidden', true);
        option.classList.remove('font-semibold');
      }
    }

    element.parentNode.classList.toggle('hidden')
    handleTotalAmount()
  };

  function addInvoiceItem(event, targetId) {
    const generatedId = event.timeStamp.toFixed(0),
      serviceRow = document.getElementById('invoice-item');
    let serviceRowCopy = serviceRow.cloneNode(true),
      quantityInput = serviceRowCopy.querySelector('#quantity-1'),
      costInput = serviceRowCopy.querySelector('#cost-1'),
      amountInput = serviceRowCopy.querySelector('#amount-1'),
      displayedValue = serviceRowCopy.querySelector('#service-input-value-1'),
      deleteButton = serviceRowCopy.querySelector('#invoice-item-delete'),
      deleteIcon = serviceRowCopy.querySelector('#invoice-item-delete-icon')

    //setting unique identifiers for each element of list item
    serviceRowCopy.querySelector('#service-input-1').removeAttribute('data-identifier')
    serviceRowCopy.querySelector('#service-input-1').addEventListener('click', () => {
      toggleDropdown(`service-${generatedId}`)
    })
    serviceRowCopy.querySelector('#service-1').setAttribute('id', `service-${generatedId}`)
    quantityInput.setAttribute('id', `quantity-${generatedId}`);
    costInput.setAttribute('id', `cost-${generatedId}`);
    amountInput.setAttribute('id', `amount-${generatedId}`);
    displayedValue.setAttribute('id', `service-input-value-${generatedId}`);
    deleteButton.setAttribute('data-itemidentifier', generatedId);
    deleteIcon.removeAttribute('hidden');

    deleteIcon.addEventListener('click', (event) => {
      handleInvoiceItemDelete(event)
    })

    //reset quantity and amount value after adding new item
    serviceRowCopy.getElementsByTagName('input')[1].value = '1';
    amountInput.value = costInput.value

    for(const option of serviceRowCopy.getElementsByTagName('li')) {
      option.setAttribute('id', `option-${generatedId}`)
      option.addEventListener('click', (event) => {
        chooseOption(event)
      })
    }

    serviceRowCopy.setAttribute('data-identifier', generatedId)

    document.getElementById(targetId).append(serviceRowCopy)

    handleTotalAmount()
  };

  function handleInvoiceItemDelete(event) {
    const elementIdentifier = event.currentTarget.parentNode.dataset.itemidentifier;
    if(elementIdentifier !== '1') {
      document.querySelector(`[data-identifier='${elementIdentifier}']`).remove()
    }
    handleTotalAmount()
  };
</script>
